@startuml Planta Nuclear
title Diagrama de Clases - Planta Nuclear

interface Notificable {
    + recibirAlerta()
}

class Duenio implements Notificable {
    + recibirAlerta()
}

class Operador implements Notificable {
    + nombre: String

    + insertarBarra(): BarraDeControl[]
    + recibirAlerta()
}

'class RegistroDeInformacion {}

class PlantaNuclear {
    + reactor: ReactorNuclear
    + operadores: Operador[]
    + duenio: Duenio

    + iniciarSimulacion()
}

class ReactorNuclear {
    - estadoActual: EstadoReactor
    - tablaDeEnergia: TablaEnergia
    - temperatura: number
    - sensor: Sensor
    - notificador: Notificador
    - horasEncendido: number

    + cambiarEstado(nuevoEstado: EstadoReactor)
    + energiaNetaProducida(): number
    + energiaProducida(): number
    + manejarSituacion(): number

    '+ barrasDeControl: BarraDeControl[]
    '+ iniciarReactor()
    '+ pararReactor()
    '+ disminuirTemperatura() 'temperatura - temperatura * %'
}

class Sensor {
    + verificarTemperatura(): number
}

class Notificador {
    + enviarNotificacion(operadores: Operador[])
}

'operador.recibir(reactor)

class BarraDeControl {
    + tiempoDeVidaUtil : number
    
    + calcularPorcentaje(tiempoDeVida) : number
}

class TablaEnergia {
    - tablaEnergia: Map<number, [number, number]>

    - interpolarEnergia(): number
    + energiaNeta(temperatura: number): number
}

Interface EstadoReactor {
    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + manejarSituacion(): number
}

'class Frio implements Estado {
    '+ getCapacidad(): number
'}

class Normal implements EstadoReactor {
    - reactor: ReactorNuclear
    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + manejarSituacion(): number
}

class Moderado implements EstadoReactor {
    - reactor: ReactorNuclear
    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + manejarSituacion(): number
}

class Critico implements EstadoReactor {
    - reactor: ReactorNuclear
    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + manejarSituacion(): number
}

class Apagado implements EstadoReactor {
    - reactor: ReactorNuclear
    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + manejarSituacion(): number
}

enum Constantes {
    + maxTemperatura = 400
    + temperaturaAlerta = 330
    + capacidadMaxReactor = 700
    + minTemperatura = 280
}

PlantaNuclear o-u- Operador
PlantaNuclear o-l- Duenio

ReactorNuclear *-u- PlantaNuclear
ReactorNuclear *-- Sensor
ReactorNuclear *-- Notificador
ReactorNuclear o-- BarraDeControl
ReactorNuclear o-l- EstadoReactor
ReactorNuclear o-r- TablaEnergia

Constantes -- EstadoReactor


'Preguntas: ¿Como aumenta la temperatura del reactor? ¿Sola? ¿Lo simulamos?
'Como delegamos las responsabilidades de los Operadores

@enduml
