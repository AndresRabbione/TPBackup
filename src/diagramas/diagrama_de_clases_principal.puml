@startuml Planta Nuclear
title Diagrama de Clases - Planta Nuclear

interface Notificable {
    + recibirAlerta(estadoReactor: EstadoReactor, manejado: boolean): number
}

class Duenio implements Notificable {
    -nombre: String
    
    + recibirAlerta(estadoReactor: EstadoReactor, manejado: boolean): number
}

class GestorDeOperadores {
    - operadores: Operador[]
    - indiceActual: number

    + notificarOperadores(estadoReactor: EstadoReactor)
    + agregarOperador(operador: Operador)
    + sacarOperador(operador: Operador)
    + getOperadores(): Operador[]
}

class Operador implements Notificable {
    - nombre: String
    - duenio: Duenio

    + insertarBarras(reactor: ReactorNuclear): BarraDeControl[]
    - elegirBarras(reactor: ReactorNuclear): BarraDeControl[]
    - eliminarBarra(reactor: ReactorNuclear, barra: BarraDeControl)
    - gastarBarras(reactor: ReactorNuclear, barras: BarraDeControl[])
    + recibirAlerta(estado: EstadoReactor, manejado: boolean): number
    + notificarDuenio(estado: EstadoReactor): number
}

class Reportador {
    - energiaTotal: number
    - acumuladorEstados: Map<String, number>

    - inicializarContadorDeEventos()
    + recibirReporteRegular(temperatura: number, energia: number): number[]
    + recibirReporteBarras(barras: number): number
    + recibirReporteTotal(horasReporte: number)
    + recibirReporteEstado(estado: String)
}

class PlantaNuclear {
    - reactor: ReactorNuclear
    - operadores: Operador[]
    - duenio: Duenio
    - horasOperadas: number
    - gestorDeOperadores: GestorDeOperadores

    + iniciarSimulacion(horasReporte: number, limite?: number): number
    + finalizarSimulacion()
    + getGestor(): GestorDeOperadores
}

class ReactorNuclear {
    - estadoActual: EstadoReactor
    - tablaDeEnergia: TablaEnergia
    - temperatura: number
    - barrasDeControl: BarraDeControl[]
    - sensor: Sensor
    - reportador: Reportador

    + encenderReactor(estado: EstadoReactor)
    + apagarReactor(): EstadoReactor
    + cambiarEstado(nuevoEstado: EstadoReactor)
    + getSensor(): Sensor
    + getEstado(): EstadoReactor
    + getTemperatura(): number
    + setTemperatura(temperatura: number)
    + getReportador(): Reportador
    + getBarras(): BarraDeControl[]
    + setBarras(barras: BarraDeControl[])
    - energiaNetaProducida(): number
    + cambiarTemperatura(tiempo: number)
}

class Sensor {
    - observer: GestorDeOperadores | undefined

    + notificar(estado: EstadoReactor)
    + suscribir(observer: GestorDeOperadores)
    + actualizarTemperatura(reactor: ReactorNuclear)
}

class BarraDeControl {
    + tiempoDeVidaUtil : number
    
    + bajarTiempoDeVida(decremento: number)
    + calcularPorcentaje() : number
}

class TablaEnergia {
    - tablaEnergia: Map<number, [number, number]>

    - interpolarEnergia(temperatura: number, temperaturaInicial: number, energiaInicial: number, temperaturaFinal: number, energiaFinal: number): number
    + energiaNeta(temperatura: number): number
}

Interface EstadoReactor {
    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + checkEstado()
    + manejarSituacion(operador: Operador): number
    + cambioTemperatura(): number
}

class Frio implements EstadoReactor {
    - reactor: ReactorNuclear

    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + checkEstado()
    + manejarSituacion(operador: Operador): number
    + cambioTemperatura(): number
}

class Normal implements EstadoReactor {
    - reactor: ReactorNuclear

    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + checkEstado()
    + manejarSituacion(operador: Operador): number
    + cambioTemperatura(): number
}

class Moderado implements EstadoReactor {
    - reactor: ReactorNuclear

    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + checkEstado()
    + manejarSituacion(operador: Operador): number
    + cambioTemperatura(): number
}

class Critico implements EstadoReactor {
    - reactor: ReactorNuclear

    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + checkEstado()
    + manejarSituacion(operador: Operador): number
    + cambioTemperatura(): number
}

class Apagado implements EstadoReactor {
    - reactor: ReactorNuclear

    + actualizarEstadoReactor(reactor: ReactorNuclear): void
    + getCapacidad(): number
    + calcularEnergia(energiaProducida: number): number
    + checkEstado()
    + manejarSituacion(operador: Operador): number
    + cambioTemperatura(): number
}

enum Constantes {
    + maxTemperatura = 400
    + temperaturaAlerta = 330
    + minTemperatura = 280
    + cambioTemperaturaPorMinuto = 0.5
    + cambioTemperaturaPorHora = 30
    + temperaturaOptima = temperaturaAlerta - cambioTemperaturaPorHora
    + horasLimite = 10
}

PlantaNuclear *-- Operador
PlantaNuclear o-- Duenio
PlantaNuclear *-- ReactorNuclear
PlantaNuclear *-- GestorDeOperadores

ReactorNuclear *-- Sensor
ReactorNuclear o-- BarraDeControl
ReactorNuclear *-- EstadoReactor
ReactorNuclear *-- TablaEnergia
ReactorNuclear o-- Reportador

Sensor o-- GestorDeOperadores

GestorDeOperadores o-- Operador

Operador o-- Duenio

@enduml
